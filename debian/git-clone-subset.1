.TH GIT-CLONE-SUBSET "1" "February 2015" "git-clone-subset 1.0.0" "User Commands"
.SH NAME
git-clone-subset \- clone a subset of a git repository
.SH SYNOPSIS
.B git clone-subset
[\fI\,options\/\fR] \fI\,<repository> <destination-dir> <pattern>\/\fR
.SH DESCRIPTION
Clones a <repository> into a <destination\-dir> and runs on the clone
git filter\-branch \fB\-\-prune\-empty\fR \fB\-\-tree\-filter\fR 'git rm ...' \fB\-\-\fR \fB\-\-all\fR
to prune from history all files except the ones matching <pattern>,
effectively creating a clone with a subset of files (and history) of the
original repository.
.PP
Useful for creating a new repository out of a set of files from another
repository, migrating (only) their associated history. Very similar to
what git filter\-branch \fB\-\-subdirectory\-filter\fR does, but for a file
pattern instead of just a single directory.
.SH OPTIONS
.HP
\fB\-h\fR, \fB\-\-help\fR
.IP
show this page.
.HP
<repository>
.IP
URL or local path to the git repository to be cloned.
.HP
<destination\-dir>
.IP
Directory to create the clone. Same rules for git\-clone applies: it
will be created if it does not exist and it must be empty otherwise.
But, unlike git\-clone, this argument is not optional: git\-clone uses
several rules to determine the "Humane" dir name of a cloned repo,
and git\-clone\-subset will not risk parse its output, let alone
predict the chosen name.
.HP
<pattern>
.IP
Glob pattern to match the desired files/dirs. It will be ultimately
evaluated by a call to bash, NOT git or sh, using extended glob
\&'!(<pattern>)' rule. Quote it or escape it on command line, so it
does not get evaluated prematurely by your current shell. Only a
single pattern is allowed: if more are required, use extglob's "|"
syntax. Globs will be evaluated with bash's shopt dotglob set, so
beware. Patterns should not contain spaces or special chars like
" ' $ ( ) { } `, not even quoted or escaped, since that might
interphere with the !() syntax after pattern expansion.
.IP
Pattern Examples:
.IP
"*.png"
.br
"*.png|*icon*"
.br
"*.h|src/|lib"
.SH
LIMITATIONS
.PP
\- Renames are NOT followed. As a workaround, list the rename history with
.IP
\&'git log \fB\-\-follow\fR \fB\-\-name\-status\fR \fB\-\-format=\fR'%H' \fB\-\-\fR file | grep "^[RAD]"'
.PP
and include all multiple names of a file in the pattern, as in
"currentname|oldname|initialname". As a side efect, if a different
file has taken place of an old name, it will be preserved too, and
there is no way around this using this tool.
.PP
\- There is no (easy) way to keep some files in a dir: using 'dir/foo*'
as pattern will not work. So keep the whole dir and remove files
afterwards, using git filter\-branch and a (quite complex) combination
of cloning, remote add, rebases, etc.
.PP
\- Pattern matching is quite limited, and many of bash's escaping and
quoting does not work properly when pattern is expanded inside !().
.SH COPYRIGHT
Copyright \(co 2013 Rodrigo Silva (MestreLion) <linux@rodrigosilva.com>
.br
License: GPLv3 or later. See <http://www.gnu.org/licenses/gpl.html>
